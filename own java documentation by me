Java:

1.java is mainly used for "application programming".
    where as c++ is used for the "system programming".
 
 2.Java does not support  "goto" statement.
      where as in c++ supports goto statement.
      
 3.Java does not support multiple inheritance you can achieve through the  interfaces in java
     in c++ supports multiple inheritance.
  
  
  4.java support pointer internally.you can't write pointer program in java.
      in c++ supports pointers.
     
     
  5.Java doesn't support operator overloading
       c++ support operator overloading
      
      
  6.java uses both compiler and interpreter
    Java source code is converted into bytecode at compilation time. 
    the interpreter executes this bytecode at runtime and produces output. 
    Java is interpreted that is why it is platform independent.
      

7.Java supports call by value only . There is no call by reference in java.
    in c++ supports both call by vlaue and call by reference.
    
    
 8.Java does not support structures and unions.
       c++ supports structures and unions.
  
 
 9.Java has built in thread support.
            c++ does not support thread.
            
            
            
 10.Java support documentation comment (/** .........*/) to create documentation for java source code.
    
            C++ doesn't support documentation comment.
            
  11.Java has no virtual keyword.we can override all non-static methods by default.
  
  
  12.unsigned right shift(>>>)
        java support unsigned right shift.that fills zero at the top for the negative numbers.
            for positive numbers it works same like >> operator
   
   
  13. Java is not so interactive with hardware.
      c++ is nearer to hardware
      
  14. Java does not support header files like C++. 
        Java uses the import keyword to include different classes and methods.
























---------------------------------------------------------------------------------------------------------------------------------------












1. Having a semicolon at the end of class is optional in Java.

class A{   
          static public void main(String... args)
          {  
           System.out.println("hello java4");  
          }  
};  




2)  java valid main method signature


   public static void main(String[] args)  
public static void main(String []args)  
public static void main(String args[])  
public static void main(String... args)  
static public void main(String[] args)  
public static final void main(String[] args)  
final public static void main(String[] args)  
final strictfp public static void main(String[] args)  



3)Java INVALID main method signature.

      public void main(String[] args)  
   static void main(String[] args)  
   public void static main(String[] args)  
   abstract public static void main(String[] args)  




4)jvm -java virtual machine
  jre  -java runtime environment
  jdk   -java developmentk it
  
  
  what does jvm does?
  The JVM performs following operation:

              Loads code
              Verifies code
              Executes code
              Provides runtime environment
              
 5) JVM ARCHITECTURE
   
   
   
   1.class loader
   
   Classloader is a subsystem of JVM which is used to load class files. Whenever we run the java program,
   it is loaded first by the classloader. There are three built-in classloaders in Java.
   
     ->Bootstrap ClassLoader: 
      This is the first classloader which is the super class of Extension classloader.
     It loads the rt.jar file which contains all class files of Java Standard Edition like java.lang package classes, 
      java.net package classes,
       java.util package classes, java.io package classes, java.sql package classes etc.

     ->Extension ClassLoader: 
        This is the child classloader of Bootstrap and parent classloader of System classloader.
       It loades the jar files located inside $JAVA_HOME/jre/lib/ext directory.
              
              
     System/Application ClassLoader:
           This is the child classloader of Extension classloader.
           It loads the classfiles from classpath. By default, classpath is set to current directory.
           You can change the classpath using "-cp" or "-classpath" switch. 
            It is also known as Application classloader.
                
              
              
              
         
         
         
         
         
         
         
         
         
    -------------------------------------------------------------------------------------------------------------------------------------
              
              Java variables
              
             There are three types of variables
             1.local variables.
             2.instance variables
             3. Static variables.
             
             1.LOCAL Variables.
             declare inside a method.
             
             
             2.INSTANCE Variables
             menas that we can declare inside class but outside of the method.
             
             3.STATIC Variable.
               variable that can  be declared as static .it can not be local variavle
              
              
              example for the variable declarations.
              class A{  
                  int data=50;//instance variable  
                    static int m=100;//static variable  
                    void method()
                    {  
                      int n=90;//local variable  
                      
                    }  
                }//end of class  
              
              
              
              
   --------------------------------------------------------------------------------------------------------------------------
   
